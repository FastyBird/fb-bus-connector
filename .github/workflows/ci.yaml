name: "build"

on:
  pull_request:
    paths-ignore:
      - ".docs/**"
  push:
    branches:
      - "master"
    tags:
      - v*
  schedule:
    - cron: "0 8 * * 1" # At 08:00 on Monday

env:
  extensions: "json"
  cache-version: "1"
  coverage: "none"

jobs:
  build-python:
    name: "Build Python distribution"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        python: ["3.9"]
        operating-system: ["ubuntu-latest"]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Set up Python ${{ matrix.python }}"
        uses: "actions/setup-python@v1"
        with:
          python-version: ${{ matrix.python }}

      - name: "Extract version"
        uses: "battila7/get-version-action@v2"
        id: "get_version"

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: "Install build dependencies"
        run: "python -m pip install wheel --user"

      - name: "Build a binary wheel and a source tarball"
        run: "python setup.py sdist bdist_wheel"

      - name: "Upload build result"
        uses: "actions/upload-artifact@v1"
        with:
          name: python-dist
          path: dist

  python-qa:
    name: "Quality assurance for Python code"
    runs-on: "${{ matrix.operating-system }}"
    needs: "build-python"

    strategy:
      matrix:
        python: ["3.9"]
        operating-system: ["ubuntu-latest"]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Set up Python ${{ matrix.python }}"
        uses: "actions/setup-python@v1"
        with:
          python-version: ${{ matrix.python }}

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: "Run code check"
        run: "make python_qa"

  python-tests:
    name: "Tests for Python code"
    runs-on: "${{ matrix.operating-system }}"
    needs: ["python-qa"]

    strategy:
      matrix:
        python: ["3.9"]
        operating-system: ["ubuntu-latest"]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Set up Python ${{ matrix.python }}"
        uses: "actions/setup-python@v1"
        with:
          python-version: ${{ matrix.python }}

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: "Run tests"
        run: "make python_tests"

  test-install-python:
    name: "Test installation of Python distribution"
    runs-on: "${{ matrix.operating-system }}"
    needs: "build-python"

    strategy:
      matrix:
        python: ["3.7", "3.8", "3.9"]
        operating-system: ["ubuntu-latest"]
        installable: ["wheel", "sdist"]

    steps:
      - name: "Download build result"
        uses: "actions/download-artifact@v1"
        with:
          name: python-dist
          path: dist

      - name: "Set up Python ${{ matrix.python }}"
        uses: "actions/setup-python@v1"
        with:
          python-version: ${{ matrix.python }}

      - name: "Install wheel"
        if: matrix.installable == 'wheel'
        run: "pip install dist/fastybird_fb_bus_connector_plugin-*-py3-none-any.whl"

      - name: "Install source tarball"
        if: matrix.installable == 'sdist'
        run: "pip install dist/fastybird-fb-bus-connector-plugin-*.tar.gz"

  publish-on-testpypi:
    name: "Publish Python distribution on Test PyPI"
    runs-on: "${{ matrix.operating-system }}"
    needs: ["test-install-python", "python-tests"]

    strategy:
      matrix:
        operating-system: ["ubuntu-latest"]

    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
      - name: "Download build result"
        uses: "actions/download-artifact@v1"
        with:
          name: python-dist
          path: dist

      - name: "Publish to index"
        uses: "pypa/gh-action-pypi-publish@master"
        with:
          password: ${{ secrets.testpypi_password }}
          repository_url: "https://test.pypi.org/legacy/"

  publish-on-pypi:
    name: "Publish Python distribution to PyPI"
    runs-on: "${{ matrix.operating-system }}"
    needs: "publish-on-testpypi"

    strategy:
      matrix:
        operating-system: ["ubuntu-latest"]

    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
      - name: "Download build result"
        uses: "actions/download-artifact@v1"
        with:
          name: python-dist
          path: dist

      - name: "Publish to index"
        uses: "pypa/gh-action-pypi-publish@master"
        with:
          password: ${{ secrets.pypi_password }}